name: Build Release Packages

on:
  push:
    branches: [ "release" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "release" ]

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  # 验证构建能否成功
  validation:
    name: Validate Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Check formatting
        run: cargo fmt --all -- --check
        
      - name: Run linting
        run: cargo clippy -- -D warnings
        
      - name: Run tests
        run: cargo test --release
        
      - name: Build
        run: cargo build --release

  # 构建多平台发布包
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    needs: validation
    strategy:
      fail-fast: false
      matrix:
        include:
          # AMD64/x86_64 架构
          - os: ubuntu-latest
            platform: linux
            arch: amd64
            artifact_name: npmclean
            asset_name: npmclean-linux-amd64
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            platform: windows
            arch: amd64
            artifact_name: npmclean.exe
            asset_name: npmclean-windows-amd64.exe
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            platform: macos
            arch: amd64
            artifact_name: npmclean
            asset_name: npmclean-macos-amd64
            target: x86_64-apple-darwin
          
          # ARM64/aarch64 架构
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            artifact_name: npmclean
            asset_name: npmclean-linux-arm64
            target: aarch64-unknown-linux-gnu
            cross: true
          - os: macos-latest  
            platform: macos
            arch: arm64
            artifact_name: npmclean
            asset_name: npmclean-macos-arm64
            target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install cross-compilation tools
        if: matrix.cross
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      
      - name: Install cross (if needed)
        if: matrix.cross
        run: cargo install cross --git https://github.com/cross-rs/cross
      
      - name: Build binary
        run: |
          if [ "${{ matrix.cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash
      
      - name: Prepare package
        shell: bash
        run: |
          mkdir -p ./dist
          
          # 查找并复制二进制文件
          if [ -f "./target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" ]; then
            cp "./target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "./dist/${{ matrix.asset_name }}"
            echo "Found binary at target-specific path"
          elif [ -f "./target/release/${{ matrix.artifact_name }}" ]; then
            cp "./target/release/${{ matrix.artifact_name }}" "./dist/${{ matrix.asset_name }}"
            echo "Found binary at default path"
          else
            echo "Error: Binary not found!"
            ls -la ./target/*/release/ || true
            ls -la ./target/release/ || true
            exit 1
          fi
          
          # 复制其他文件
          cp README.md ./dist/ 2>/dev/null || echo "README.md not found"
          find . -maxdepth 1 -name "LICENSE*" -exec cp {} ./dist/ \; 2>/dev/null || echo "No LICENSE files found"
          
          # 验证文件存在
          ls -la ./dist/
      
      - name: Create archive (Unix)
        if: matrix.platform != 'windows'
        run: |
          cd ./dist
          tar czvf ../${{ matrix.asset_name }}.tar.gz *
      
      - name: Create archive (Windows)
        if: matrix.platform == 'windows'
        run: |
          Compress-Archive -Path ./dist/* -DestinationPath ./${{ matrix.asset_name }}.zip
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            ${{ matrix.asset_name }}.tar.gz
            ${{ matrix.asset_name }}.zip
          if-no-files-found: error

  # 创建GitHub发布
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: Move artifacts to root
        run: |
          mkdir -p ./release_assets
          find ./artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} ./release_assets/ \;
          ls -la ./release_assets/
      
      - name: Generate release notes
        id: release_notes
        run: |
          echo "Generating release notes for tag: ${GITHUB_REF#refs/tags/}"
          
          # Extract changes since last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${GITHUB_REF#refs/tags/}^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # If this is the first tag
            CHANGES=$(git log --pretty=format:"* %s (%h)" --reverse)
            echo "## First Release" > RELEASE_NOTES.md
          else
            # Get changes between last tag and this one
            CHANGES=$(git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..${GITHUB_REF#refs/tags/})
            echo "## Changes since $PREVIOUS_TAG" > RELEASE_NOTES.md
          fi
          
          echo "" >> RELEASE_NOTES.md
          if [ -z "$CHANGES" ]; then
            echo "* No changes recorded" >> RELEASE_NOTES.md
          else
            echo "$CHANGES" >> RELEASE_NOTES.md
          fi
          
          # Add download section
          echo "" >> RELEASE_NOTES.md
          echo "## Downloads" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "Choose the appropriate binary for your platform:" >> RELEASE_NOTES.md
          echo "- Linux x64: \`npmclean-linux-amd64.tar.gz\`" >> RELEASE_NOTES.md
          echo "- Linux ARM64: \`npmclean-linux-arm64.tar.gz\`" >> RELEASE_NOTES.md
          echo "- Windows x64: \`npmclean-windows-amd64.exe.zip\`" >> RELEASE_NOTES.md
          echo "- macOS x64: \`npmclean-macos-amd64.tar.gz\`" >> RELEASE_NOTES.md
          echo "- macOS ARM64 (Apple Silicon): \`npmclean-macos-arm64.tar.gz\`" >> RELEASE_NOTES.md
          
          cat RELEASE_NOTES.md
          
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: ./release_assets/*
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}