name: Build Release Packages

on:
  push:
    branches: [ "release" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "release" ]

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  # 验证构建能否成功
  validation:
    name: Validate Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Run linting
        run: cargo clippy -- -D warnings
      - name: Run tests
        run: cargo test --release
      - name: Build
        run: cargo build --release

  # 构建多平台发布包
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    needs: validation
    strategy:
      fail-fast: false
      matrix:
        include:
          # AMD64/x86_64 架构
          - os: ubuntu-latest
            platform: linux
            arch: amd64
            artifact_name: npmclean
            asset_name: npmclean-linux-amd64
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            platform: windows
            arch: amd64
            artifact_name: npmclean.exe
            asset_name: npmclean-windows-amd64.exe
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            platform: macos
            arch: amd64
            artifact_name: npmclean
            asset_name: npmclean-macos-amd64
            target: x86_64-apple-darwin
          
          # ARM64/aarch64 架构
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            artifact_name: npmclean
            asset_name: npmclean-linux-arm64
            target: aarch64-unknown-linux-gnu
            cross: true
          - os: macos-latest  
            platform: macos
            arch: arm64
            artifact_name: npmclean
            asset_name: npmclean-macos-arm64
            target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      
      - name: Install cross-compilation tools
        if: matrix.cross
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      
      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.cross }}
      
      - name: Prepare package
        shell: bash
        run: |
          mkdir -p ./dist
          # 针对不同架构指定正确的目标路径
          cp ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ./dist/${{ matrix.asset_name }} || cp ./target/release/${{ matrix.artifact_name }} ./dist/${{ matrix.asset_name }}
          cp README.md LICENSE* ./dist/ || true
      
      - name: Create archive (Unix)
        if: matrix.platform != 'windows'
        run: |
          cd ./dist
          tar czvf ../${{ matrix.asset_name }}.tar.gz *
      
      - name: Create archive (Windows)
        if: matrix.platform == 'windows'
        run: |
          Compress-Archive -Path ./dist/* -DestinationPath ./${{ matrix.asset_name }}.zip
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: |
            ${{ matrix.asset_name }}.tar.gz
            ${{ matrix.asset_name }}.zip
          if-no-files-found: error

  # 创建GitHub发布
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Move artifacts to root
        run: |
          mkdir -p ./release_assets
          find . -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} ./release_assets/ \;
      
      - name: Generate release notes
        id: release_notes
        run: |
          echo "Generating release notes for tag: ${GITHUB_REF#refs/tags/}"
          
          # Extract changes since last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${GITHUB_REF#refs/tags/}^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # If this is the first tag
            CHANGES=$(git log --pretty=format:"* %s (%h)" ${GITHUB_REF#refs/tags/})
          else
            # Get changes between last tag and this one
            CHANGES=$(git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..${GITHUB_REF#refs/tags/})
          fi
          
          # Create release notes file
          echo "# npmclean ${GITHUB_REF#refs/tags/}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Changes since $PREVIOUS_TAG" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "$CHANGES" >> RELEASE_NOTES.md
          
          # Make content available to other steps
          cat RELEASE_NOTES.md
          
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: ./release_assets/*
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 